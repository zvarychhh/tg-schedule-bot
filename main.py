from datetime import date, timedelta, datetime
import datetime
import chardet
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
from config import token

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ —ñ—Å–Ω—É—î
cursor.execute("""
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER,
        group_code TEXT
    )
""")
conn.commit()


class ReedStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_date = State()



def get_user_group(user_id):
    cursor.execute('SELECT group_code FROM students WHERE telegram_id=?', (user_id,))
    result = cursor.fetchone()
    conn.commit()
    if result:
        return result[0]
    else:
        return None


def parse(sdate, edate, group ):
    
    payload = {
    "group": group.encode("cp1251"),
    "sdate": sdate,
    "edate": edate,
}
    response = requests.post('https://dekanat.nung.edu.ua/cgi-bin/timetable.cgi?n=700', data=payload)
    encoding = chardet.detect(response.content)["encoding"] # windows-1251
    html = response.content.decode(encoding)
    soup = BeautifulSoup(html, "html.parser")
    trs = soup.find_all("tr")
    tst = [i.text for i in soup.find_all("h4")][4:]
    result = [None] * len(trs)
    ind = 0
    for tr in trs:
        tds = tr.find_all("td")
        i = 1 
        for td in tds:
            if i == 1:
                result[ind] = f"{td.text} –ø–∞—Ä–∞ \n"
            if i == 2:
                result[ind] =  result[ind] + f" {td.text[:5]}-{td.text[5:]} " 
            else:
                result[ind] = result[ind] + td.text
            i += 1
        ind += 1
    return  result if result else "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–∫–∏ –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î"



async def send_today(message: types.Message):
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∞–π—Ç —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–¥
    day = date.today().strftime("%d.%m.%Y")
    try:
        lessons_list = parse(day, day, get_user_group(message.from_user.id))
    except AttributeError:
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–∫–∏—Å—è –≤ –±–æ—Ç—ñ. –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é /group")
        return
    lsn = "\n".join(lessons_list) if type(lessons_list) == list else lessons_list
    await message.answer(f"–î–∞—Ç–∞: {day}\n{lsn}")


async def send_tomorrow(message: types.Message):
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∞–π—Ç —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–¥
    day = (date.today() + timedelta(days=1)).strftime("%d.%m.%Y")
    try:
        lessons_list = parse(day, day, get_user_group(message.from_user.id))
    except AttributeError:
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–∫–∏—Å—è –≤ –±–æ—Ç—ñ. –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é /group")
        return
    lsn = "\n".join(lessons_list) if type(lessons_list) == list else lessons_list
    await message.answer(f"–î–∞—Ç–∞: {day}\n{lsn}")

async def send_week(message: types.Message):
    days = [(date.today() + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    for day in days:
        try:
            lessons_list = parse(day, day, get_user_group(message.from_user.id))
        except AttributeError:
            await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–∫–∏—Å—è –≤ –±–æ—Ç—ñ. –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é /group")
            return
        lsn = "\n".join(lessons_list) if type(lessons_list) == list else lessons_list
        await message.answer(f"–î–∞—Ç–∞: {day}\n{lsn}")

async def reed_day(message: types.Message):
    await message.answer(f'–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: –¥–¥.–º–º.—Ä—Ä—Ä \n–ø—Ä–∏–∫–ª–∞–¥ /day {date.today().strftime("%d.%m.%Y")}')
    await ReedStates.waiting_for_date.set()   

@dp.message_handler(state=ReedStates.waiting_for_date)
async def send_day(message: types.Message, state: FSMContext):
    try:
        date_str = message.text
        day = datetime.datetime.strptime(date_str, "%d.%m.%Y").strftime("%d.%m.%Y")
        try:
            lessons_list = parse(day, day, get_user_group(message.from_user.id))
        except AttributeError:
            await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–∫–∏—Å—è –≤ –±–æ—Ç—ñ. –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é /group")
            return
        lsn = "\n".join(lessons_list) if type(lessons_list) == list else lessons_list
        await message.answer(f"–î–∞—Ç–∞: {day}\n{lsn}")
    except ValueError:
        await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ [{message.text}]. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: –¥–¥.–º–º.—Ä—Ä—Ä—Ä \n–ü—Ä–∏–∫–ª–∞–¥ {date.today().strftime("%d.%m.%Y")} ')
    await state.finish()


async def reed_group(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –®–∏—Ñ—Ä –≥—Ä—É–ø–∏ –ø—Ä–∏–∫–ª–∞–¥(AA-11-1):")
    await ReedStates.waiting_for_text.set()      

@dp.message_handler(state=ReedStates.waiting_for_text)
async def save_group(message: types.Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–∏ –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    group_code = message.text
    if not group_code:
        await message.reply("–í–∏ –Ω–µ –≤–≤–µ–ª–∏ <b>–®–∏—Ñ—Ä –≥—Ä—É–ø–∏</b>")
        await reed_group()
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    cursor.execute("SELECT * FROM students WHERE telegram_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–≤–æ—é –≥—Ä—É–ø–æ—é
        cursor.execute("UPDATE students SET group_code=? WHERE telegram_id=?", (group_code, message.from_user.id))
        conn.commit()
        await message.answer(f'–ì—Ä—É–ø—É "{group_code}" –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  {message.from_user.username}')
    else:
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        cursor.execute("INSERT INTO students (telegram_id, group_code) VALUES (?, ?)", (message.from_user.id, group_code))
        conn.commit()
        await message.answer(f'–ì—Ä—É–ø—É "{group_code}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.username}')
    await state.finish()



async def help_cmd_handler(message: types.Message):
    commands=[
        types.BotCommand("today", "–†–æ–∑–∫–ª–∞–¥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"),
        types.BotCommand("tomorrow", "–†–æ–∑–∫–ª–∞–¥ –∑–∞ –∑–∞–≤—Ç—Ä–∞"),
        types.BotCommand("week", "–†–æ–∑–∫–ª–∞–¥ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"),
        types.BotCommand("group", "–ì—Ä—É–ø–∞ –∑–∞ —è–∫–æ—é –±—É–¥–µ –π—Ç–∏ –ø–æ—à—É–∫"),
        types.BotCommand("day", "–†–æ–∑–∫–ª–∞–¥ –∑–∞ –ø–µ–≤–Ω–∏–π –¥–µ–Ω—å"),
        types.BotCommand("help", "–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥"),
        
        ]
    await bot.set_my_commands(commands)
    await message.answer(f'‚öôÔ∏è <b>–ú–æ—ó –∫–æ–º–∞–Ω–¥–∏:</b>\n‚ûñ /group - –ì—Ä—É–ø–∞ –∑–∞ —è–∫–∏–º –±—É–¥–µ–º–æ —à—É–∫–∞—Ç–∏\n‚ûñ /tomorrow - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n‚ûñ /today - —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n‚ûñ /week - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n‚ûñ /day - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –ø–µ–≤–Ω–∏–º–∞ –¥–∞—Ç–æ—é\n‚ûñ /help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n ', parse_mode="HTML")
    

async def start_handler(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.username}</b>!\n–û—Ä–≥–∞–Ω—ñ–∑—É–π —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ–Ω–µ', parse_mode="HTML")
    await message.answer(f'–ö–µ—Ä—É–π—Ç–µ —Å–≤–æ—ó–º —â–æ–¥–µ–Ω–Ω–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @schadule_bot.\n –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—Å—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–∏ –º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ <i>–¥–µ–Ω—å, —Ç–∏–∂–¥–µ–Ω—å, —Ç–æ—â–æ!</i>\n–°–ø—Ä–æ–±—É–π—Ç–µ —Ü–µ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –±—É–¥—å—Ç–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ!', parse_mode="HTML")
    await message.answer(f'‚öôÔ∏è <b>–ú–æ—ó –∫–æ–º–∞–Ω–¥–∏:</b>\n‚ûñ /group - –ì—Ä—É–ø–∞ –∑–∞ —è–∫–∏–º –±—É–¥–µ–º–æ —à—É–∫–∞—Ç–∏\n‚ûñ /today - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n‚ûñ /week - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n‚ûñ /day - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –ø–µ–≤–Ω–∏–º–∞ –¥–∞—Ç–æ—é\n‚ûñ /help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n ', parse_mode="HTML")
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="group", callback_data="group")
    keyboard.add(button)
    await message.answer(f'–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ üîê <b>–®–∏—Ñ—Ä –ì—Ä—É–ø–∏</b> (–ø—Ä–∏–∫–ª. –ê–ê-11-1)\n –≤–∏–∫–æ–Ω–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥–æ–π /group', reply_markup=keyboard, parse_mode='HTML')


# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /group, /today, /week, /day

dp.register_message_handler(start_handler, commands=['start'])
dp.register_message_handler(help_cmd_handler, commands=['help'])
dp.register_message_handler(reed_group, commands=['group'])
dp.register_message_handler(send_today, commands=['today'])
dp.register_message_handler(send_tomorrow, commands=['tomorrow'])
dp.register_message_handler(send_week, commands=['week'])
dp.register_message_handler(reed_day, commands=['day'])
dp.register_callback_query_handler(reed_group, text="group")

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –ë–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp)